#!/usr/bin/env python
'''
mcu: Modeling and Crystallographic Utilities
Copyright (C) 2019 Hung Q. Pham. All Rights Reserved.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

Email: Hung Q. Pham <pqh3.14@gmail.com>
'''

import numpy as np
import subprocess
from mcu.utils import misc
from mcu.cell import utils as cell_utils
        
        
##################### EXPORT CIF, XSF, POSCAR ###########################          
def write_poscar(cell, filename=None):
    if filename == None: filename = 'POSCAR_mcu'
    comment = misc.date()
    lattice = np.asarray(cell[0])
    positions = np.asarray(cell[1])
    atoms = np.asarray(cell[2])
    idx = np.argsort(atoms)
    atoms = atoms[idx]
    symbol = cell_utils.convert_atomtype(atoms)
    irred_symbol, count = misc.unique(symbol) 
    positions = positions[idx]
    
    with open(filename, 'w') as f:
        f.write('Generated by mcu on ' + comment + '\n')
        f.write('1.0\n') 
        for i in range(3):
            f.write('   %15.10f %15.10f %15.10f\n' % (lattice[i,0],lattice[i,1],lattice[i,2]))         
        for symb in irred_symbol:
            f.write(' %s ' % (symb)) 
        f.write('\n')
        for num_atom in count:
            f.write(' %d ' % (num_atom)) 
        f.write('\n')
        f.write('Direct\n')
        for atom in positions:
            f.write('   %15.10f %15.10f %15.10f\n' % (atom[0],atom[1],atom[2]))   

def write_xsf(cell, filename=None):
    if filename == None: filename = 'mcu'
    comment = misc.date()
    lattice = np.asarray(cell[0])
    positions = np.asarray(cell[1])
    abs_positions = positions.dot(lattice)
    atoms = np.asarray(cell[2])
    natom = len(atoms)
    symbol = cell_utils.convert_atomtype(atoms)

    with open(filename + '.xsf', 'w') as f:
        f.write('Generated by mcu on ' + comment + '\n')   
        f.write('CRYSTAL\n')
        f.write('PRIMVEC\n')    
        for i in range(3):
            f.write('   %15.10f %15.10f %15.10f\n' % (lattice[i,0],lattice[i,1],lattice[i,2]))   
        f.write('CONVVEC\n')
        for i in range(3):
            f.write('   %15.10f %15.10f %15.10f\n' % (lattice[i,0],lattice[i,1],lattice[i,2]))     
        f.write('PRIMCOORD\n')
        f.write('%3d %3d\n' % (natom, 1))
        for atom in range(natom):
            f.write(' %s  %15.10f  %15.10f  %15.10f\n' % (symbol[atom], abs_positions[atom][0], abs_positions[atom][1], abs_positions[atom][2]))          
      
def write_cif(cell, spacegroup, equi_atoms, symopt, filename=None):
    if filename == None: filename = 'mcu'
    comment = misc.date()
    lattice = np.asarray(cell[0])
    lattice = cell_utils.convert_lattice(lattice)   
    positions = np.asarray(cell[1])
    atoms = np.asarray(cell[2])
    new_atm = [atoms[atm] for atm in np.unique(equi_atoms)]
    new_pos = [positions[atm] for atm in np.unique(equi_atoms)]
    natom = len(new_atm)
    symbol = cell_utils.convert_atomtype(new_atm)
    nsymopt = len(symopt)
    
    with open(filename + '.cif', 'w') as f:
        f.write('data_New_Crystal\n') 
        f.write("_audit_creation_method         '%s'\n" % ('Generated by mcu on ' + comment))
        f.write('_cell_length_a     %15.10f\n' % (lattice[0]))
        f.write('_cell_length_b     %15.10f\n' % (lattice[1])) 
        f.write('_cell_length_c     %15.10f\n' % (lattice[2]))   
        f.write('_cell_angle_alpha     %15.10f\n' % (lattice[3]))
        f.write('_cell_angle_beta      %15.10f\n' % (lattice[4])) 
        f.write('_cell_angle_gamma     %15.10f\n' % (lattice[5])) 
        f.write('\n')  
        f.write("_symmetry_space_group_name_H-M     '%s'\n" % (spacegroup[1]))
        f.write('_symmetry_Int_Tables_number        %s\n' % (spacegroup[0]))
        f.write('loop_\n')        
        f.write('_symmetry_equiv_pos_as_xyz\n') 
        for i in range(nsymopt):
            f.write('%s\n' % (symopt[i]))
            
        f.write('\n')  
        f.write('loop_\n')
        f.write('_atom_site_label\n')
        f.write('_atom_site_type_symbol\n')
        f.write('_atom_site_fract_x\n')
        f.write('_atom_site_fract_y\n')
        f.write('_atom_site_fract_z\n')        
        for atom in range(natom):
            f.write('   %s   %s   %15.10f   %15.10f   %15.10f\n' % (symbol[atom], symbol[atom], new_pos[atom][0], new_pos[atom][1], new_pos[atom][2]))     

            
############### Working with CIF file #########################
class cif:
    def __init__(self, file=None):
    
        if file == None:        # The 1st 
            proc = subprocess.Popen('/bin/ls *.cif', shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
            out, err = proc.communicate()
            file = str(out).split("'")[1].split("\\")[0]
        if not misc.check_exist(file):
            print('Cannot find any cif file in the current directory', file)
        else:
            cif_raw = open(file, "r").readlines()
            self.cif = self.refine_cif(cif_raw)
            self.cell = self.make_cell()
            
    def refine_cif(self, cif):
        '''Remove blank lines from self.cif'''
        
        for i, line in enumerate(cif):
            if line.strip() == '': cif.pop(i)
        return cif
        
    def write_poscar(self, filename=None):
        write_poscar(self.cell, filename)
        
    def write_cif(self):
        pass
        #cell_io.write_cif(self.cell, spacegroup, equi_atoms, symopt, filename) 
            
    def make_cell(self):
        '''Read cell information from cif file and return a cell spglib object'''
        
        a = self.extract_line('_cell_length_a', data_type='float')
        b = self.extract_line('_cell_length_b', data_type='float')
        c = self.extract_line('_cell_length_c', data_type='float')
        alpha = self.extract_line('_cell_angle_alpha', data_type='float')
        beta = self.extract_line('_cell_angle_beta', data_type='float')
        gamma = self.extract_line('_cell_angle_gamma', data_type='float')
        sg_sym = self.extract_line('_symmetry_space_group_name_H-M', data_type='str')
        sg_num = self.extract_line('_symmetry_Int_Tables_number', data_type='int') 
        irred_symbol, irred_frac = self.extract_coordinate()
        symopt = self.extract_sym_operator()
        rotations, translations = cell_utils.symop_xyz2mat(symopt)
        full_symbol, full_frac = cell_utils.genetate_atoms(irred_symbol, irred_frac, rotations, translations)
        self.lattice = [a,b,c,alpha,beta,gamma]
        self.lattice = cell_utils.convert_lattice(self.lattice)
        positions = full_frac
        atom_type = cell_utils.convert_atomtype(full_symbol)
        cell = (self.lattice, positions, atom_type)
        
        self.spg = [sg_sym, sg_num]
        self.irred_atoms = [irred_symbol, irred_frac]
        
        return cell
        
        
    def extract_coordinate(self):
        '''Extract the (irreducible) coordinates block'''
        out = None
        block_keys = []
        start = 0
        stop = False
        for i in range(len(self.cif)):
            line = self.cif[i].strip()
            if line.startswith('_atom_site_'):
                block_keys.append(line.split('_atom_site_')[1].split('\n')[0])
                start = i + 1
                stop = True
            elif stop == True:
                break
                
        num_keys = len(block_keys)

        where_symbol = block_keys.index('type_symbol')
        where_x = block_keys.index('fract_x')
        where_y = block_keys.index('fract_y')
        where_z = block_keys.index('fract_z')
        if 'label' in block_keys: 
            where_label = block_keys.index('label')
            label = []
        if 'occupancy' in block_keys:
            where_occ = block_keys.index('occupancy')
            occupancy = []
            
        symbol = []
        frac = []
        for i in range(start, len(self.cif)):
            line = self.cif[i].strip().split()
            if len(line) == num_keys:
                symbol.append(line[where_symbol])
                frac.append([cell_utils.rm_paren(line[where_x]),
                             cell_utils.rm_paren(line[where_y]),
                             cell_utils.rm_paren(line[where_z])])
                if 'label' in block_keys: label.append(line[where_label])
                if 'occupancy' in block_keys: occupancy.append(line[where_occ])                
            else:
                break

        frac = np.float64(frac)
        
        return symbol, frac
        
    def extract_sym_operator(self):
        '''Extract the (irreducible) coordinates block'''
        
        start = 0
        for i in range(len(self.cif)):
            line = self.cif[i].strip()
            if line.startswith('_symmetry_equiv_pos_as_xyz'):
                start = i + 1
                break
                
        sym_operators = []
        for i in range(start, len(self.cif)):
            line = self.cif[i].strip()
            if line == '' or line.startswith("_"): 
                break
                    
            if "'" in line:
                line = line.split("'")[1]
            else:
                line = line.split()
                if len(line) == 2:
                    line = line[1]
                elif len(line) == 3:
                    line = line[0] + line[1] + line[2]
                else:
                    line = line[0]
            sym_operators.append(line)
            
        return sym_operators
                
                
    def extract_line(self, key, data_type='str'):
        '''Extract the value after a keyword'''
        out = None
        for line in self.cif:
            if line.strip().startswith(key):
                temp = line.split()
                if len(temp) == 2:
                    out = cell_utils.rm_paren(temp[1].replace("'",""))
                else:
                    new_temp = ''
                    for i in range(len(temp)-1):
                        new_temp += temp[i+1] + ' '
                    out = new_temp.replace("'","").strip()
                break
                
        if out != None:
            if data_type == 'float':
                out = float(out)
            elif data_type == 'int':
                out = int(out)
            
        return out
                 