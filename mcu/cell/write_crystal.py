#!/usr/bin/env python
'''
mcu: Modeling and Crystallographic Utilities
Copyright (C) 2019 Hung Q. Pham. All Rights Reserved.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

Email: Hung Q. Pham <pqh3.14@gmail.com>
'''

import numpy as np
from mcu.utils import misc
from mcu.cell import utils as cell_utils

def write_poscar(cell, filename=None):
    if filename == None: filename = 'POSCAR_mcu'
    comment = misc.date()
    lattice = np.asarray(cell[0])
    positions = np.asarray(cell[1])
    atoms = np.asarray(cell[2])
    idx = np.argsort(atoms)
    atoms = atoms[idx]
    symbol = cell_utils.to_symbol(atoms)
    irred_symbol, count = misc.unique(symbol) 
    positions = positions[idx]
    
    with open(filename, 'w') as f:
        f.write('Generated by mcu on ' + comment + '\n')
        f.write('1.0\n') 
        for i in range(3):
            f.write('   %15.10f %15.10f %15.10f\n' % (lattice[i,0],lattice[i,1],lattice[i,2]))         
        for symb in irred_symbol:
            f.write(' %s ' % (symb)) 
        f.write('\n')
        for num_atom in count:
            f.write(' %d ' % (num_atom)) 
        f.write('\n')
        f.write('Direct\n')
        for atom in positions:
            f.write('   %15.10f %15.10f %15.10f\n' % (atom[0],atom[1],atom[2]))   

def write_xsf(cell, filename=None):
    if filename == None: filename = 'mcu'
    comment = misc.date()
    lattice = np.asarray(cell[0])
    positions = np.asarray(cell[1])
    abs_positions = positions.dot(lattice.T)
    atoms = np.asarray(cell[2])
    natom = len(atoms)
    symbol = cell_utils.to_symbol(atoms)

    with open(filename + '.xsf', 'w') as f:
        f.write('Generated by mcu on ' + comment + '\n')   
        f.write('CRYSTAL\n')
        f.write('PRIMVEC\n')    
        for i in range(3):
            f.write('   %15.10f %15.10f %15.10f\n' % (lattice[i,0],lattice[i,1],lattice[i,2]))   
        f.write('CONVVEC\n')
        for i in range(3):
            f.write('   %15.10f %15.10f %15.10f\n' % (lattice[i,0],lattice[i,1],lattice[i,2]))     
        f.write('PRIMCOORD\n')
        f.write('%3d %3d\n' % (natom, 1))
        for atom in range(natom):
            f.write('%s  %15.10f  %15.10f  %15.10f\n' % (symbol[atom], abs_positions[atom][0], abs_positions[atom][1], abs_positions[atom][2]))          
      
def write_cif(cell, spacegroup, equi_atoms, symopt, filename=None):
    if filename == None: filename = 'mcu'
    comment = misc.date()
    lattice = np.asarray(cell[0])
    lattice = cell_utils.convert_lattice(lattice)   
    positions = np.asarray(cell[1])
    atoms = np.asarray(cell[2])
    new_atm = [atoms[atm] for atm in np.unique(equi_atoms)]
    new_pos = [positions[atm] for atm in np.unique(equi_atoms)]
    natom = len(new_atm)
    symbol = cell_utils.to_symbol(new_atm)
    nsymopt = len(symopt)
    
    with open(filename + '.cif', 'w') as f:
        f.write('data_New_Crystal\n') 
        f.write("_audit_creation_method         '%s'\n" % ('Generated by mcu on ' + comment))
        f.write('_cell_length_a     %15.10f\n' % (lattice[0]))
        f.write('_cell_length_b     %15.10f\n' % (lattice[1])) 
        f.write('_cell_length_c     %15.10f\n' % (lattice[2]))   
        f.write('_cell_angle_alpha     %15.10f\n' % (lattice[3]))
        f.write('_cell_angle_beta      %15.10f\n' % (lattice[4])) 
        f.write('_cell_angle_gamma     %15.10f\n' % (lattice[5])) 
        f.write('\n')  
        f.write("_symmetry_space_group_name_H-M     '%s'\n" % (spacegroup[1]))
        f.write('_symmetry_Int_Tables_number        %s\n' % (spacegroup[0]))
        f.write('loop_\n')        
        f.write('_symmetry_equiv_pos_as_xyz\n') 
        for i in range(nsymopt):
            f.write('%s\n' % (symopt[i]))
            
        f.write('\n')  
        f.write('loop_\n')
        f.write('_atom_site_label\n')
        f.write('_atom_site_type_symbol\n')
        f.write('_atom_site_fract_x\n')
        f.write('_atom_site_fract_y\n')
        f.write('_atom_site_fract_z\n')        
        for atom in range(natom):
            f.write('%s %s %15.10f  %15.10f  %15.10f\n' % (symbol[atom], symbol[atom], new_pos[atom][0], new_pos[atom][1], new_pos[atom][2]))          
                           